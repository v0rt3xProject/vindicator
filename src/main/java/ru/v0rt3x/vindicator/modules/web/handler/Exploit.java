package ru.v0rt3x.vindicator.modules.web.handler;

import com.mongodb.client.MongoCollection;
import com.mongodb.client.model.IndexOptions;
import org.apache.velocity.VelocityContext;
import org.bson.Document;
import org.bson.types.ObjectId;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import ru.v0rt3x.vindicator.VindicatorCore;
import ru.v0rt3x.vindicator.common.GenericMethod;
import ru.v0rt3x.vindicator.modules.web.WebUIPageHandler;

import java.util.ArrayList;
import java.util.List;

public class Exploit implements WebUIPageHandler {

    private MongoCollection<Document> exploits;

    public Exploit() {
        exploits = VindicatorCore.getInstance().getDataBase().getCollection("exploits");
        exploits.createIndex(new Document("agentId", 1).append("name", 1), new IndexOptions().unique(true));
    }

    public static class ExploitObject {

        private ObjectId id;
        private String agent;
        private String name;
        private String command;
        private Long lastActivity;

        public ExploitObject(ObjectId id, String agent, String name, String command, Long lastActivity) {
            this.id = id;
            this.agent = agent;
            this.name = name;
            this.command = command;
            this.lastActivity = lastActivity;
        }

        public String id() {
            return id.toHexString();
        }

        public String agent() {
            return agent;
        }

        public String name() {
            return name;
        }

        public String command() {
            return command;
        }

        public String lastActivity() {
            Long lastActivity = System.currentTimeMillis() - this.lastActivity;

            Long days = lastActivity / 86400000L;
            lastActivity -= days * 86400000L;
            if (days > 0)
                return String.format("%d day(s) ago", days);

            Long hours = lastActivity / 3600000L;
            lastActivity -= hours * 3600000L;
            if (hours > 0)
                return String.format("%d hour(s) ago", hours);

            Long minutes = lastActivity / 60000L;
            lastActivity -= minutes * 60000L;
            if (minutes > 0)
                return String.format("%d minute(s) ago", minutes);

            Long seconds = lastActivity / 1000L;
            return String.format("%d second(s) ago", seconds);
        }

        private static ExploitObject fromBSON(Document doc) {
            return new ExploitObject(
                doc.getObjectId("_id"),
                doc.getString("agentId"),
                doc.getString("name"),
                doc.getString("command"),
                doc.getLong("lastActivity")
            );
        }
    }

    @Override
    public void prepareContext(VelocityContext ctx) {
        List<ExploitObject> exploitObjects = new ArrayList<>();

        for (Document doc: exploits.find()) {
            exploitObjects.add(ExploitObject.fromBSON(doc));
        }

        ctx.internalPut("EXPLOITS", exploitObjects);
    }

    @SuppressWarnings("unchecked")
    @GenericMethod("list")
    public void list(JSONObject request, JSONObject response) {
        JSONArray exploitList = new JSONArray();

        for (Document doc: exploits.find()) {
            Exploit.ExploitObject exploitObject = ExploitObject.fromBSON(doc);
            JSONObject exploit = new JSONObject();

            exploit.put("id", exploitObject.id());
            exploit.put("agentId", exploitObject.agent());
            exploit.put("name", exploitObject.name());
            exploit.put("command", exploitObject.command());
            exploit.put("lastActivity", exploitObject.lastActivity());

            exploitList.add(exploit);
        }

        response.put("exploits", exploitList);
    }

    @SuppressWarnings("unchecked")
    @GenericMethod("delete")
    public void delete(JSONObject request, JSONObject response) {
        String target = (String) request.get("target");

        Document filter = new Document("_id", new ObjectId(target));

        response.put("notify", true);
        if (exploits.deleteOne(filter).getDeletedCount() > 0) {
            response.put("success", true);
            response.put("message", String.format("Exploit %s deleted", target));

            response.put("target", target);
        } else {
            response.put("success", false);
            response.put("message", String.format("Unable to delete Exploit %s", target));
        }
    }
}
